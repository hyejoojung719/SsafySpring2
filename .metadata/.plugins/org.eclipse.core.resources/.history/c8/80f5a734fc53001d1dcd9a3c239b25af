<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- DataSource 빈 등록 -->
	<!--  Spring 쪽에서 Connection Pool 관리 -->
	<!-- <bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property value="com.mysql.cj.jdbc.Driver"
			name="driverClass"></property>
		<property
			value="jdbc:mysql://localhost:3306/bookdb?serverTimezone=UTC"
			name="url"></property>
		<property value="ssafy" name="username"></property>
		<property value="ssafy" name="password"></property>
	</bean> -->
	
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/ssafy"></property>
	</bean>
	
	<!-- ApplicationContextHolder 빈 등록 -->
	<bean class="com.ssafy.mvc.ApplicationContextHolder"></bean>

	<context:component-scan base-package="com.ssafy.mvc.model,com.ssafy.mvc.aop"></context:component-scan>
	
	<!-- 빈등록 시, 자동으로 프록시 객체 생성 가능하게 해줌(PointCut으로 지정된 클래스의 경우) -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- mybatis 설정  -->
	<!-- 1. sqlSessionFactory 빈 등록 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- DataSource -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- typeAlias -->
		<property name="typeAliasesPackage" value="com.ssafy.mvc.dto"></property>
		<!-- mapper.xml의 경로 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" ></property>
	</bean>
	<!-- 2. SqlSession 빈 등록 -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean> -->
	
	<!-- mybatis mapper 빈 등록 -->
	<!-- 정리1. mybatis-spring:scan은 base 패키지 안에있는 모든 인터페이스에대해 mapper 빈으로 등록함 -->
	<!-- 정리2. annotation 속성을 통해 설정된 어노테이션으로 내가 원하는 인터페이스만 mapper 빈으로 등록 가능하다. -->
	<!-- <mybatis-spring:scan base-package="com.ssafy.mvc.model.mapper"/> -->
	<mybatis-spring:scan base-package="com.ssafy.mvc.model"
				annotation="org.apache.ibatis.annotations.Mapper"/> 
				<!-- (annotation빼고 실행 시)service까지 mapper로 등록되므로 이렇게하면 안됨. 그래서 annotation 속성을 추가해준다.-->
	
</beans>
